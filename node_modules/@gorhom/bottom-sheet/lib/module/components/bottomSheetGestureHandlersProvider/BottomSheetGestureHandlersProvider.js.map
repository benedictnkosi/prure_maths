{"version":3,"sources":["BottomSheetGestureHandlersProvider.tsx"],"names":["React","useMemo","GESTURE_SOURCE","useGestureHandler","useBottomSheetInternal","useGestureEventsHandlersDefault","BottomSheetGestureHandlersContext","BottomSheetGestureHandlersProvider","gestureEventsHandlersHook","useGestureEventsHandlers","children","animatedContentGestureState","animatedHandleGestureState","handleOnStart","handleOnActive","handleOnEnd","contentPanGestureHandler","SCROLLABLE","handlePanGestureHandler","HANDLE","contextValue"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SACEC,iBADF,EAEEC,sBAFF,EAGEC,+BAHF,QAIO,aAJP;AAKA,SAASC,iCAAT,QAAkD,gBAAlD;;AAGA,MAAMC,kCAAkC,GAAG,CAAC;AAC1CC,EAAAA,yBAAyB,EACvBC,wBAAwB,GAAGJ,+BAFa;AAG1CK,EAAAA;AAH0C,CAAD,KAII;AAC7C;AACA,QAAM;AAAEC,IAAAA,2BAAF;AAA+BC,IAAAA;AAA/B,MACJR,sBAAsB,EADxB;AAEA,QAAM;AAAES,IAAAA,aAAF;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA;AAAjC,MACJN,wBAAwB,EAD1B,CAJ6C,CAO7C;;AACA,QAAMO,wBAAwB,GAAGb,iBAAiB,CAChDD,cAAc,CAACe,UADiC,EAEhDN,2BAFgD,EAGhDE,aAHgD,EAIhDC,cAJgD,EAKhDC,WALgD,CAAlD;AAOA,QAAMG,uBAAuB,GAAGf,iBAAiB,CAC/CD,cAAc,CAACiB,MADgC,EAE/CP,0BAF+C,EAG/CC,aAH+C,EAI/CC,cAJ+C,EAK/CC,WAL+C,CAAjD,CAf6C,CAuB7C;;AACA,QAAMK,YAAY,GAAGnB,OAAO,CAC1B,OAAO;AAAEe,IAAAA,wBAAF;AAA4BE,IAAAA;AAA5B,GAAP,CAD0B,EAE1B,CAACF,wBAAD,EAA2BE,uBAA3B,CAF0B,CAA5B;AAIA,sBACE,oBAAC,iCAAD,CAAmC,QAAnC;AAA4C,IAAA,KAAK,EAAEE;AAAnD,KACGV,QADH,CADF;AAKD,CArCD;;AAuCA,eAAeH,kCAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { GESTURE_SOURCE } from '../../constants';\nimport {\n  useGestureHandler,\n  useBottomSheetInternal,\n  useGestureEventsHandlersDefault,\n} from '../../hooks';\nimport { BottomSheetGestureHandlersContext } from '../../contexts';\nimport type { BottomSheetGestureHandlersProviderProps } from './types';\n\nconst BottomSheetGestureHandlersProvider = ({\n  gestureEventsHandlersHook:\n    useGestureEventsHandlers = useGestureEventsHandlersDefault,\n  children,\n}: BottomSheetGestureHandlersProviderProps) => {\n  // hooks\n  const { animatedContentGestureState, animatedHandleGestureState } =\n    useBottomSheetInternal();\n  const { handleOnStart, handleOnActive, handleOnEnd } =\n    useGestureEventsHandlers();\n\n  // gestures\n  const contentPanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.SCROLLABLE,\n    animatedContentGestureState,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n  const handlePanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.HANDLE,\n    animatedHandleGestureState,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n\n  // context value\n  const contextValue = useMemo(\n    () => ({ contentPanGestureHandler, handlePanGestureHandler }),\n    [contentPanGestureHandler, handlePanGestureHandler]\n  );\n  return (\n    <BottomSheetGestureHandlersContext.Provider value={contextValue}>\n      {children}\n    </BottomSheetGestureHandlersContext.Provider>\n  );\n};\n\nexport default BottomSheetGestureHandlersProvider;\n"]}