{"version":3,"sources":["useGestureHandler.ts"],"names":["useAnimatedGestureHandler","useGestureHandler","type","state","handleOnStart","handleOnActive","handleOnEnd","gestureHandler","onStart","payload","context","value","onActive","onEnd","onCancel","onFail","onFinish"],"mappings":"AAAA,SAAmBA,yBAAnB,QAAoD,yBAApD;AAQA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,IAD+B,EAE/BC,KAF+B,EAG/BC,aAH+B,EAI/BC,cAJ+B,EAK/BC,WAL+B,KAMsB;AACrD,QAAMC,cAAc,GAClBP,yBAAyB,CACvB;AACEQ,IAAAA,OAAO,EAAE,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC7BP,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACAC,MAAAA,aAAa,CAACF,IAAD,EAAOO,OAAP,EAAgBC,OAAhB,CAAb;AACD,KAJH;AAKEE,IAAAA,QAAQ,EAAE,CAACH,OAAD,EAAUC,OAAV,KAAsB;AAC9BP,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACAE,MAAAA,cAAc,CAACH,IAAD,EAAOO,OAAP,EAAgBC,OAAhB,CAAd;AACD,KARH;AASEG,IAAAA,KAAK,EAAE,CAACJ,OAAD,EAAUC,OAAV,KAAsB;AAC3BP,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACAG,MAAAA,WAAW,CAACJ,IAAD,EAAOO,OAAP,EAAgBC,OAAhB,CAAX;AACD,KAZH;AAaEI,IAAAA,QAAQ,EAAEL,OAAO,IAAI;AACnBN,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACD,KAfH;AAgBEY,IAAAA,MAAM,EAAEN,OAAO,IAAI;AACjBN,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACD,KAlBH;AAmBEa,IAAAA,QAAQ,EAAEP,OAAO,IAAI;AACnBN,MAAAA,KAAK,CAACQ,KAAN,GAAcF,OAAO,CAACN,KAAtB;AACD;AArBH,GADuB,EAwBvB,CAACD,IAAD,EAAOC,KAAP,EAAcC,aAAd,EAA6BC,cAA7B,EAA6CC,WAA7C,CAxBuB,CAD3B;AA2BA,SAAOC,cAAP;AACD,CAnCM","sourcesContent":["import Animated, { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport {\n  State,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { GESTURE_SOURCE } from '../constants';\nimport type { GestureEventHandlerCallbackType } from '../types';\n\nexport const useGestureHandler = (\n  type: GESTURE_SOURCE,\n  state: Animated.SharedValue<State>,\n  handleOnStart: GestureEventHandlerCallbackType,\n  handleOnActive: GestureEventHandlerCallbackType,\n  handleOnEnd: GestureEventHandlerCallbackType\n): ((event: PanGestureHandlerGestureEvent) => void) => {\n  const gestureHandler =\n    useAnimatedGestureHandler<PanGestureHandlerGestureEvent>(\n      {\n        onStart: (payload, context) => {\n          state.value = payload.state;\n          handleOnStart(type, payload, context);\n        },\n        onActive: (payload, context) => {\n          state.value = payload.state;\n          handleOnActive(type, payload, context);\n        },\n        onEnd: (payload, context) => {\n          state.value = payload.state;\n          handleOnEnd(type, payload, context);\n        },\n        onCancel: payload => {\n          state.value = payload.state;\n        },\n        onFail: payload => {\n          state.value = payload.state;\n        },\n        onFinish: payload => {\n          state.value = payload.state;\n        },\n      },\n      [type, state, handleOnStart, handleOnActive, handleOnEnd]\n    );\n  return gestureHandler;\n};\n"]}