{"version":3,"sources":["animate.ts"],"names":["animate","point","configs","undefined","velocity","onComplete","ANIMATION_CONFIGS","type","ANIMATION_METHOD","TIMING","SPRING"],"mappings":";;;;;;;AAAA;;AACA;;AASO,MAAMA,OAAO,GAAG,CAAC;AACtBC,EAAAA,KADsB;AAEtBC,EAAAA,OAAO,GAAGC,SAFY;AAGtBC,EAAAA,QAAQ,GAAG,CAHW;AAItBC,EAAAA;AAJsB,CAAD,KAKF;AACnB;;AAEA,MAAI,CAACH,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAGI,4BAAV;AACD,GALkB,CAOnB;;;AACA,QAAMC,IAAI,GACR,cAAcL,OAAd,IAAyB,YAAYA,OAArC,GACIM,4BAAiBC,MADrB,GAEID,4BAAiBE,MAHvB;;AAKA,MAAIH,IAAI,KAAKC,4BAAiBC,MAA9B,EAAsC;AACpC,WAAO,uCAAWR,KAAX,EAAkBC,OAAlB,EAAwDG,UAAxD,CAAP;AACD,GAFD,MAEO;AACL;AACAH,IAAAA,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACA,WAAO,uCAAWH,KAAX,EAAkBC,OAAlB,EAAwDG,UAAxD,CAAP;AACD;AACF,CAzBM","sourcesContent":["import Animated, { withSpring, withTiming } from 'react-native-reanimated';\nimport { ANIMATION_CONFIGS, ANIMATION_METHOD } from '../constants';\n\ninterface AnimateParams {\n  point: number;\n  velocity?: number;\n  configs?: Animated.WithSpringConfig | Animated.WithTimingConfig;\n  onComplete?: (isFinished: boolean) => void;\n}\n\nexport const animate = ({\n  point,\n  configs = undefined,\n  velocity = 0,\n  onComplete,\n}: AnimateParams) => {\n  'worklet';\n\n  if (!configs) {\n    configs = ANIMATION_CONFIGS;\n  }\n\n  // detect animation type\n  const type =\n    'duration' in configs || 'easing' in configs\n      ? ANIMATION_METHOD.TIMING\n      : ANIMATION_METHOD.SPRING;\n\n  if (type === ANIMATION_METHOD.TIMING) {\n    return withTiming(point, configs as Animated.WithTimingConfig, onComplete);\n  } else {\n    // @ts-ignore\n    configs.velocity = velocity;\n    return withSpring(point, configs as Animated.WithSpringConfig, onComplete);\n  }\n};\n"]}