{"version":3,"sources":["BottomSheetDraggableView.tsx"],"names":["React","useMemo","useRef","memo","Animated","PanGestureHandler","useBottomSheetGestureHandlers","useBottomSheetInternal","styles","BottomSheetDraggableViewComponent","nativeGestureRef","refreshControlGestureRef","style","children","rest","panGestureRef","enableContentPanningGesture","simultaneousHandlers","_providedSimultaneousHandlers","waitFor","activeOffsetX","activeOffsetY","failOffsetX","failOffsetY","contentPanGestureHandler","refs","push","Array","isArray","containerStyle","container","BottomSheetDraggableView","displayName"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,IAAjC,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SACEC,6BADF,EAEEC,sBAFF,QAGO,aAHP;AAKA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,iCAAiC,GAAG,CAAC;AACzCC,EAAAA,gBADyC;AAEzCC,EAAAA,wBAFyC;AAGzCC,EAAAA,KAHyC;AAIzCC,EAAAA,QAJyC;AAKzC,KAAGC;AALsC,CAAD,KAML;AACnC;AACA,QAAMC,aAAa,GAAGb,MAAM,CAAoB,IAApB,CAA5B,CAFmC,CAInC;;AACA,QAAM;AACJc,IAAAA,2BADI;AAEJC,IAAAA,oBAAoB,EAAEC,6BAFlB;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA;AAPI,MAQFhB,sBAAsB,EAR1B;AASA,QAAM;AAAEiB,IAAAA;AAAF,MAA+BlB,6BAA6B,EAAlE,CAdmC,CAgBnC;;AACA,QAAMW,oBAAoB,GAAGhB,OAAO,CAAC,MAAM;AACzC,UAAMwB,IAAI,GAAG,EAAb;;AAEA,QAAIf,gBAAJ,EAAsB;AACpBe,MAAAA,IAAI,CAACC,IAAL,CAAUhB,gBAAV;AACD;;AAED,QAAIC,wBAAJ,EAA8B;AAC5Bc,MAAAA,IAAI,CAACC,IAAL,CAAUf,wBAAV;AACD;;AAED,QAAIO,6BAAJ,EAAmC;AACjC,UAAIS,KAAK,CAACC,OAAN,CAAcV,6BAAd,CAAJ,EAAkD;AAChDO,QAAAA,IAAI,CAACC,IAAL,CAAU,GAAGR,6BAAb;AACD,OAFD,MAEO;AACLO,QAAAA,IAAI,CAACC,IAAL,CAAUR,6BAAV;AACD;AACF;;AAED,WAAOO,IAAP;AACD,GApBmC,EAoBjC,CACDP,6BADC,EAEDR,gBAFC,EAGDC,wBAHC,CApBiC,CAApC,CAjBmC,CA2CnC;;AACA,QAAMkB,cAAc,GAAG5B,OAAO,CAAC,MAAM;AACnC,QAAI,CAACW,KAAL,EAAY;AACV,aAAOJ,MAAM,CAACsB,SAAd;AACD;;AAED,QAAIH,KAAK,CAACC,OAAN,CAAchB,KAAd,CAAJ,EAA0B;AACxB,aAAO,CAACJ,MAAM,CAACsB,SAAR,EAAmB,GAAGlB,KAAtB,CAAP;AACD;;AAED,WAAO,CAACJ,MAAM,CAACsB,SAAR,EAAmBlB,KAAnB,CAAP;AACD,GAV6B,EAU3B,CAACA,KAAD,CAV2B,CAA9B;AAYA,sBACE,oBAAC,iBAAD;AACE,IAAA,GAAG,EAAEG,aADP;AAEE,IAAA,OAAO,EAAEC,2BAFX;AAGE,IAAA,oBAAoB,EAAEC,oBAHxB;AAIE,IAAA,uBAAuB,EAAE,KAJ3B;AAKE,IAAA,OAAO,EAAEE,OALX;AAME,IAAA,cAAc,EAAEK,wBANlB;AAOE,IAAA,aAAa,EAAEJ,aAPjB;AAQE,IAAA,aAAa,EAAEC,aARjB;AASE,IAAA,WAAW,EAAEC,WATf;AAUE,IAAA,WAAW,EAAEC;AAVf,kBAYE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEM;AAAtB,KAA0Cf,IAA1C,GACGD,QADH,CAZF,CADF;AAkBD,CAhFD;;AAkFA,MAAMkB,wBAAwB,gBAAG5B,IAAI,CAACM,iCAAD,CAArC;AACAsB,wBAAwB,CAACC,WAAzB,GAAuC,0BAAvC;AAEA,eAAeD,wBAAf","sourcesContent":["import React, { useMemo, useRef, memo } from 'react';\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport {\n  useBottomSheetGestureHandlers,\n  useBottomSheetInternal,\n} from '../../hooks';\nimport type { BottomSheetDraggableViewProps } from './types';\nimport { styles } from './styles';\n\nconst BottomSheetDraggableViewComponent = ({\n  nativeGestureRef,\n  refreshControlGestureRef,\n  style,\n  children,\n  ...rest\n}: BottomSheetDraggableViewProps) => {\n  // refs\n  const panGestureRef = useRef<PanGestureHandler>(null);\n\n  // hooks\n  const {\n    enableContentPanningGesture,\n    simultaneousHandlers: _providedSimultaneousHandlers,\n    waitFor,\n    activeOffsetX,\n    activeOffsetY,\n    failOffsetX,\n    failOffsetY,\n  } = useBottomSheetInternal();\n  const { contentPanGestureHandler } = useBottomSheetGestureHandlers();\n\n  // variables\n  const simultaneousHandlers = useMemo(() => {\n    const refs = [];\n\n    if (nativeGestureRef) {\n      refs.push(nativeGestureRef);\n    }\n\n    if (refreshControlGestureRef) {\n      refs.push(refreshControlGestureRef);\n    }\n\n    if (_providedSimultaneousHandlers) {\n      if (Array.isArray(_providedSimultaneousHandlers)) {\n        refs.push(..._providedSimultaneousHandlers);\n      } else {\n        refs.push(_providedSimultaneousHandlers);\n      }\n    }\n\n    return refs;\n  }, [\n    _providedSimultaneousHandlers,\n    nativeGestureRef,\n    refreshControlGestureRef,\n  ]);\n\n  // styles\n  const containerStyle = useMemo(() => {\n    if (!style) {\n      return styles.container;\n    }\n\n    if (Array.isArray(style)) {\n      return [styles.container, ...style];\n    }\n\n    return [styles.container, style];\n  }, [style]);\n\n  return (\n    <PanGestureHandler\n      ref={panGestureRef}\n      enabled={enableContentPanningGesture}\n      simultaneousHandlers={simultaneousHandlers}\n      shouldCancelWhenOutside={false}\n      waitFor={waitFor}\n      onGestureEvent={contentPanGestureHandler}\n      activeOffsetX={activeOffsetX}\n      activeOffsetY={activeOffsetY}\n      failOffsetX={failOffsetX}\n      failOffsetY={failOffsetY}\n    >\n      <Animated.View style={containerStyle} {...rest}>\n        {children}\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nconst BottomSheetDraggableView = memo(BottomSheetDraggableViewComponent);\nBottomSheetDraggableView.displayName = 'BottomSheetDraggableView';\n\nexport default BottomSheetDraggableView;\n"]}