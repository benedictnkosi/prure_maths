{"version":3,"sources":["BottomSheetGestureHandlersProvider.tsx"],"names":["BottomSheetGestureHandlersProvider","gestureEventsHandlersHook","useGestureEventsHandlers","useGestureEventsHandlersDefault","children","animatedContentGestureState","animatedHandleGestureState","handleOnStart","handleOnActive","handleOnEnd","contentPanGestureHandler","GESTURE_SOURCE","SCROLLABLE","handlePanGestureHandler","HANDLE","contextValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAKA;;;;;;AAGA,MAAMA,kCAAkC,GAAG,CAAC;AAC1CC,EAAAA,yBAAyB,EACvBC,wBAAwB,GAAGC,sCAFa;AAG1CC,EAAAA;AAH0C,CAAD,KAII;AAC7C;AACA,QAAM;AAAEC,IAAAA,2BAAF;AAA+BC,IAAAA;AAA/B,MACJ,oCADF;AAEA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA;AAAjC,MACJP,wBAAwB,EAD1B,CAJ6C,CAO7C;;AACA,QAAMQ,wBAAwB,GAAG,8BAC/BC,0BAAeC,UADgB,EAE/BP,2BAF+B,EAG/BE,aAH+B,EAI/BC,cAJ+B,EAK/BC,WAL+B,CAAjC;AAOA,QAAMI,uBAAuB,GAAG,8BAC9BF,0BAAeG,MADe,EAE9BR,0BAF8B,EAG9BC,aAH8B,EAI9BC,cAJ8B,EAK9BC,WAL8B,CAAhC,CAf6C,CAuB7C;;AACA,QAAMM,YAAY,GAAG,oBACnB,OAAO;AAAEL,IAAAA,wBAAF;AAA4BG,IAAAA;AAA5B,GAAP,CADmB,EAEnB,CAACH,wBAAD,EAA2BG,uBAA3B,CAFmB,CAArB;AAIA,sBACE,6BAAC,2CAAD,CAAmC,QAAnC;AAA4C,IAAA,KAAK,EAAEE;AAAnD,KACGX,QADH,CADF;AAKD,CArCD;;eAuCeJ,kC","sourcesContent":["import React, { useMemo } from 'react';\nimport { GESTURE_SOURCE } from '../../constants';\nimport {\n  useGestureHandler,\n  useBottomSheetInternal,\n  useGestureEventsHandlersDefault,\n} from '../../hooks';\nimport { BottomSheetGestureHandlersContext } from '../../contexts';\nimport type { BottomSheetGestureHandlersProviderProps } from './types';\n\nconst BottomSheetGestureHandlersProvider = ({\n  gestureEventsHandlersHook:\n    useGestureEventsHandlers = useGestureEventsHandlersDefault,\n  children,\n}: BottomSheetGestureHandlersProviderProps) => {\n  // hooks\n  const { animatedContentGestureState, animatedHandleGestureState } =\n    useBottomSheetInternal();\n  const { handleOnStart, handleOnActive, handleOnEnd } =\n    useGestureEventsHandlers();\n\n  // gestures\n  const contentPanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.SCROLLABLE,\n    animatedContentGestureState,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n  const handlePanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.HANDLE,\n    animatedHandleGestureState,\n    handleOnStart,\n    handleOnActive,\n    handleOnEnd\n  );\n\n  // context value\n  const contextValue = useMemo(\n    () => ({ contentPanGestureHandler, handlePanGestureHandler }),\n    [contentPanGestureHandler, handlePanGestureHandler]\n  );\n  return (\n    <BottomSheetGestureHandlersContext.Provider value={contextValue}>\n      {children}\n    </BottomSheetGestureHandlersContext.Provider>\n  );\n};\n\nexport default BottomSheetGestureHandlersProvider;\n"]}